from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
from utils import spin_roulette
from database import user_already_played, save_user_spin, clean_old_spins
from logger import log_user_action, log_error

def get_unique_prizes(prizes):
    """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    seen = set()
    unique_prizes = []
    for prize in prizes:
        if prize['name'] not in seen:
            seen.add(prize['name'])
            unique_prizes.append(prize)
    return unique_prizes

def create_welcome_message(prizes):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–∑–æ–≤"""
    unique_prizes = get_unique_prizes(prizes)
    
    message = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤!\n\n"
    message += "üéÅ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã:\n"
    
    for i, prize in enumerate(unique_prizes, 1):
        message += f"{i}. {prize['name']}\n"
    
    message += "\nüéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—Ä—É—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!"
    
    return message

def register_handlers(dp):
    router = Router()

    @router.message(CommandStart())
    async def start_cmd(message: types.Message):
        try:
            if message.from_user is None:
                await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            user_id = message.from_user.id
            username = message.from_user.username or "Unknown"
            
            log_user_action(user_id, "start_command", f"Username: {username}")
            
            await clean_old_spins()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open("config.json", encoding="utf-8") as f:
                config = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = create_welcome_message(config["prizes"])
            
            # –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª
            rules_text = (
                "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
                "<i>–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç–æ–ª.</i>\n\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ö—Ä—É—Ç–∏—Ç—å"
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="üéØ –ö—Ä—É—Ç–∏—Ç—å", callback_data="spin_roulette"))
            
            await message.answer(welcome_text, reply_markup=builder.as_markup())
            await message.answer(rules_text, parse_mode="HTML")
            
        except Exception as e:
            log_error(e, f"start_command for user {message.from_user.id if message.from_user else 'Unknown'}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @router.callback_query(F.data == "spin_roulette")
    async def spin_roulette_callback(callback: types.CallbackQuery):
        try:
            user_id = callback.from_user.id
            username = callback.from_user.username or "Unknown"
            
            log_user_action(user_id, "spin_roulette_clicked", f"Username: {username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            if await user_already_played(user_id):
                await callback.answer("üòÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üéÅ", show_alert=True)
                log_user_action(user_id, "already_played_today")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open("config.json", encoding="utf-8") as f:
                config = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.message –¥–æ—Å—Ç—É–ø–Ω–æ
            if callback.message is None:
                await callback.answer("üòî –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            new_message = await callback.message.answer("üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            prize = await spin_roulette(new_message, config["prizes"], config["review_link"])
            await save_user_spin(user_id)
            
            log_user_action(user_id, "won_prize", f"Prize: {prize['name']}")
            
        except Exception as e:
            log_error(e, f"spin_roulette_callback for user {callback.from_user.id if callback.from_user else 'Unknown'}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    dp.include_router(router)
